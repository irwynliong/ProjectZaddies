{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\GregT\\\\OneDrive\\\\Desktop\\\\NUS Work Space\\\\Sheares Hall\\\\NUS Fintech Hackathon\\\\pandacontract\\\\panda-files\\\\src\\\\Panda.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { PandaContract, connectWallet, updateMessage, loadCurrentMessage, getCurrentWalletConnected, approveAmt, tokenTransfer, allowanceTransfer } from \"./util/interact.js\";\nimport alchemylogo from \"./alchemylogo.svg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Panda = () => {\n  _s();\n\n  //state variables\n  const contract_owner = \"0x7a6586830eB47F53FA2F66E538d51aCc1B10FeB8\"; // my second wallet for testing purposes\n\n  const [walletAddress, setWallet] = useState(\"\");\n  const [status, setStatus] = useState(\"\");\n  const [message, setMessage] = useState(\"No connection to the network.\"); //default message\n\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [myBalance, setMyBalance] = useState(0);\n  const [approveTokenAmt, setApproveTokenAmt] = useState(0);\n  const [transferTokenAmt, setTransferTokenAmt] = useState(0);\n  const [transferAllowanceAmt, setTransferAllowanceAmt] = useState(0);\n  const [receiverWallet, setReceiverWallet] = useState('');\n  const [fromWallet, setFromWallet] = useState('');\n  const [toWallet, setToWallet] = useState('');\n  const [approvedWalletAddress, setApprovedWalletAdress] = useState(''); //called only once\n\n  useEffect(async () => {\n    const message = await loadCurrentMessage();\n    setMessage(message);\n    addSmartContractListener();\n    const {\n      address,\n      status\n    } = await getCurrentWalletConnected();\n    setWallet(address);\n    setStatus(status);\n    addWalletListener();\n    getMyBalance();\n  }, [walletAddress]);\n\n  function addSmartContractListener() {\n    PandaContract.events.UpdatedMessages({}, (error, data) => {\n      if (error) {\n        setStatus(\"😥 \" + error.message);\n      } else {\n        setMessage(data.returnValues[1]);\n        setNewMessage(\"\");\n        setStatus(\"🎉 Your message has been updated!\");\n      }\n    });\n    PandaContract.events.Transfer({}, (error, data) => {\n      if (error) {\n        setStatus(\"😥 \" + error.message);\n      } else {\n        setMessage(data.returnValues[1]);\n        setNewMessage(\"\");\n        setStatus(\"🎉 Your transfer has been done!\");\n      }\n    });\n  }\n\n  function addWalletListener() {\n    if (window.ethereum) {\n      window.ethereum.on(\"accountsChanged\", accounts => {\n        if (accounts.length > 0) {\n          setWallet(accounts[0]);\n          setStatus(\"👆🏽 Write a message in the text-field above.\");\n        } else {\n          setWallet(\"\");\n          setStatus(\"🦊 Connect to Metamask using the top right button.\");\n        }\n      });\n    } else {\n      setStatus( /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\" \", \"\\uD83E\\uDD8A\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n          target: \"_blank\",\n          href: `https://metamask.io/download.html`,\n          children: \"You must install Metamask, a virtual Ethereum wallet, in your browser.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this));\n    }\n  }\n\n  const connectWalletPressed = async () => {\n    const walletResponse = await connectWallet();\n    setStatus(walletResponse.status);\n    setWallet(walletResponse.address);\n  };\n\n  const onUpdatePressed = async () => {\n    const {\n      status\n    } = await updateMessage(walletAddress, newMessage);\n    setStatus(status);\n  };\n\n  const onApprovePressed = async () => {\n    const {\n      status\n    } = await approveAmt(walletAddress, contract_owner, approveTokenAmt);\n    setStatus(status);\n  };\n\n  const totalSupplyPressed = async () => {\n    const test = await PandaContract.methods.totalSupply().call();\n    console.log(test);\n  };\n\n  const getMyBalance = async () => {\n    if (walletAddress) {\n      const balance = await PandaContract.methods.balanceOf(walletAddress).call();\n      setMyBalance(balance);\n    }\n  };\n\n  const getAllowance = async () => {\n    if (walletAddress && approvedWalletAddress) {\n      const allowance = await PandaContract.methods.allowance(walletAddress, approvedWalletAddress).call();\n      console.log(approvedWalletAddress, ': ', allowance, ' PAN');\n    }\n  };\n\n  const transferTokens = async () => {\n    const {\n      status\n    } = await tokenTransfer(walletAddress, receiverWallet, transferTokenAmt);\n    setStatus(status);\n  };\n\n  const transferAllowance = async () => {\n    const {\n      status\n    } = await allowanceTransfer(walletAddress, fromWallet, toWallet, transferAllowanceAmt);\n    setStatus(status);\n  }; //the UI of our component\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      id: \"logo\",\n      src: alchemylogo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      id: \"walletButton\",\n      onClick: connectWalletPressed,\n      children: walletAddress.length > 0 ? \"Connected: \" + String(walletAddress).substring(0, 6) + \"...\" + String(walletAddress).substring(38) : /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Connect Wallet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      style: {\n        paddingTop: \"50px\"\n      },\n      children: \"Current Message:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      style: {\n        paddingTop: \"18px\"\n      },\n      children: \"New Message:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Update the message in your smart contract.\",\n        onChange: e => setNewMessage(e.target.value),\n        value: newMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        id: \"status\",\n        children: status\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"publish\",\n        onClick: onUpdatePressed,\n        children: \"Update\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: totalSupplyPressed,\n        children: \"Total Supply\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"My Panda Token Balance: \", myBalance]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Please input how many tokens you want Panda Bank to handle for you\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        onChange: e => setApproveTokenAmt(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onApprovePressed,\n        children: \"Approve\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Transfer tokens\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Receiver wallet address\",\n        onChange: e => setReceiverWallet(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        placeholder: \"number of tokens to transfer\",\n        onChange: e => setTransferTokenAmt(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: transferTokens,\n        children: \"Confirm Transaction\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Find allowance\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"input wallet address\",\n        onChange: e => setApprovedWalletAdress(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: getAllowance,\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Transfer allowance\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"input owner wallet address\",\n        onChange: e => setFromWallet(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"input receiver wallet address\",\n        onChange: e => setToWallet(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        placeholder: \"input number of tokens to transfer\",\n        onChange: e => setTransferAllowanceAmt(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: transferAllowance,\n        children: \"Transfer funds\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 143,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Panda, \"tph8p06TtvC9jlnAO9U/siys0ks=\");\n\n_c = Panda;\nexport default Panda;\n\nvar _c;\n\n$RefreshReg$(_c, \"Panda\");","map":{"version":3,"sources":["C:/Users/GregT/OneDrive/Desktop/NUS Work Space/Sheares Hall/NUS Fintech Hackathon/pandacontract/panda-files/src/Panda.js"],"names":["React","useEffect","useState","PandaContract","connectWallet","updateMessage","loadCurrentMessage","getCurrentWalletConnected","approveAmt","tokenTransfer","allowanceTransfer","Panda","contract_owner","walletAddress","setWallet","status","setStatus","message","setMessage","newMessage","setNewMessage","myBalance","setMyBalance","approveTokenAmt","setApproveTokenAmt","transferTokenAmt","setTransferTokenAmt","transferAllowanceAmt","setTransferAllowanceAmt","receiverWallet","setReceiverWallet","fromWallet","setFromWallet","toWallet","setToWallet","approvedWalletAddress","setApprovedWalletAdress","addSmartContractListener","address","addWalletListener","getMyBalance","events","UpdatedMessages","error","data","returnValues","Transfer","window","ethereum","on","accounts","length","connectWalletPressed","walletResponse","onUpdatePressed","onApprovePressed","totalSupplyPressed","test","methods","totalSupply","call","console","log","balance","balanceOf","getAllowance","allowance","transferTokens","transferAllowance","alchemylogo","String","substring","paddingTop","e","target","value"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { useEffect, useState } from \"react\";\r\nimport {\r\n  PandaContract,\r\n  connectWallet,\r\n  updateMessage,\r\n  loadCurrentMessage,\r\n  getCurrentWalletConnected,\r\n  approveAmt, \r\n  tokenTransfer,\r\n  allowanceTransfer\r\n} from \"./util/interact.js\";\r\n\r\nimport alchemylogo from \"./alchemylogo.svg\";\r\n\r\nconst Panda = () => {\r\n  //state variables\r\n  const contract_owner = \"0x7a6586830eB47F53FA2F66E538d51aCc1B10FeB8\" // my second wallet for testing purposes\r\n  const [walletAddress, setWallet] = useState(\"\");\r\n  const [status, setStatus] = useState(\"\");\r\n  const [message, setMessage] = useState(\"No connection to the network.\"); //default message\r\n  const [newMessage, setNewMessage] = useState(\"\");\r\n  const [myBalance, setMyBalance] = useState(0);\r\n  const [approveTokenAmt, setApproveTokenAmt] = useState(0);\r\n  const [transferTokenAmt, setTransferTokenAmt] = useState(0);\r\n  const [transferAllowanceAmt, setTransferAllowanceAmt] = useState(0);\r\n  const [receiverWallet, setReceiverWallet] = useState('');\r\n  const [fromWallet, setFromWallet] = useState('');\r\n  const [toWallet, setToWallet] = useState('');\r\n  const [approvedWalletAddress, setApprovedWalletAdress] = useState('')\r\n\r\n\r\n  //called only once\r\n  useEffect(async () => {\r\n    const message = await loadCurrentMessage();\r\n    setMessage(message);\r\n    addSmartContractListener();\r\n\r\n    const {address, status} = await getCurrentWalletConnected();\r\n    setWallet(address);\r\n    setStatus(status);\r\n\r\n    addWalletListener();\r\n    getMyBalance();\r\n\r\n\r\n  }, [walletAddress]);\r\n\r\n  function addSmartContractListener() {\r\n    PandaContract.events.UpdatedMessages({}, (error, data) => {\r\n      if (error) {\r\n        setStatus(\"😥 \" + error.message);\r\n      } else {\r\n        setMessage(data.returnValues[1]);\r\n        setNewMessage(\"\");\r\n        setStatus(\"🎉 Your message has been updated!\");\r\n      }\r\n    });\r\n    PandaContract.events.Transfer({}, (error, data) => {\r\n      if (error) {\r\n        setStatus(\"😥 \" + error.message);\r\n      } else {\r\n        setMessage(data.returnValues[1]);\r\n        setNewMessage(\"\");\r\n        setStatus(\"🎉 Your transfer has been done!\");\r\n      }\r\n    });\r\n  }\r\n\r\n  function addWalletListener() { \r\n    if (window.ethereum) {\r\n      window.ethereum.on(\"accountsChanged\", (accounts) => {\r\n        if (accounts.length > 0) {\r\n          setWallet(accounts[0]);\r\n          setStatus(\"👆🏽 Write a message in the text-field above.\");\r\n        } else {\r\n          setWallet(\"\");\r\n          setStatus(\"🦊 Connect to Metamask using the top right button.\");\r\n        }\r\n      });\r\n    } else {\r\n      setStatus(\r\n        <p>\r\n          {\" \"}\r\n          🦊{\" \"}\r\n          <a target=\"_blank\" href={`https://metamask.io/download.html`}>\r\n            You must install Metamask, a virtual Ethereum wallet, in your\r\n            browser.\r\n          </a>\r\n        </p>\r\n      );\r\n    }\r\n  }\r\n\r\n  const connectWalletPressed = async () => {\r\n    const walletResponse = await connectWallet();\r\n    setStatus(walletResponse.status);\r\n    setWallet(walletResponse.address);\r\n  };\r\n\r\n  const onUpdatePressed = async () => {\r\n    const { status } = await updateMessage(walletAddress, newMessage);\r\n    setStatus(status);\r\n  };\r\n\r\n  const onApprovePressed = async () => {\r\n    const { status } = await approveAmt(walletAddress, contract_owner, approveTokenAmt)\r\n    setStatus(status)\r\n    \r\n  };\r\n\r\n\r\n  const totalSupplyPressed = async () => {\r\n    const test = await PandaContract.methods.totalSupply().call()\r\n    console.log(test)\r\n  }\r\n\r\n  const getMyBalance = async () => {\r\n    if(walletAddress){\r\n      const balance = await PandaContract.methods.balanceOf(walletAddress).call()\r\n      setMyBalance(balance)\r\n    }\r\n  }\r\n  const getAllowance = async () => {\r\n    if(walletAddress && approvedWalletAddress){\r\n      const allowance = await PandaContract.methods.allowance(walletAddress, approvedWalletAddress).call()\r\n      console.log(approvedWalletAddress, ': ', allowance, ' PAN')\r\n    }\r\n  }\r\n\r\n  const transferTokens = async () => {\r\n    const { status } = await tokenTransfer(walletAddress, receiverWallet, transferTokenAmt);\r\n    setStatus(status)\r\n  }\r\n\r\n  const transferAllowance = async () => {\r\n    const { status } = await allowanceTransfer(walletAddress, fromWallet, toWallet, transferAllowanceAmt);\r\n    setStatus(status)\r\n  }\r\n\r\n  //the UI of our component\r\n  return (\r\n    <div id=\"container\">\r\n      <img id=\"logo\" src={alchemylogo}></img>\r\n      <button id=\"walletButton\" onClick={connectWalletPressed}>\r\n        {walletAddress.length > 0 ? (\r\n          \"Connected: \" +\r\n          String(walletAddress).substring(0, 6) +\r\n          \"...\" +\r\n          String(walletAddress).substring(38)\r\n        ) : (\r\n          <span>Connect Wallet</span>\r\n        )}\r\n      </button>\r\n\r\n      <h2 style={{ paddingTop: \"50px\" }}>Current Message:</h2>\r\n      <p>{message}</p>\r\n\r\n      <h2 style={{ paddingTop: \"18px\" }}>New Message:</h2>\r\n\r\n      <div>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Update the message in your smart contract.\"\r\n          onChange={(e) => setNewMessage(e.target.value)}\r\n          value={newMessage}\r\n        />\r\n        <p id=\"status\">{status}</p>\r\n\r\n        <button id=\"publish\" onClick={onUpdatePressed}>\r\n          Update\r\n        </button>\r\n      </div>\r\n      <div>\r\n        <button onClick={totalSupplyPressed}>\r\n          Total Supply\r\n        </button>\r\n      </div>\r\n      <div>\r\n        My Panda Token Balance: {myBalance}\r\n      </div>\r\n      <div>\r\n        <div>\r\n          Please input how many tokens you want Panda Bank to handle for you\r\n        </div>\r\n        <input\r\n        type='number'\r\n        onChange={(e) => setApproveTokenAmt(e.target.value)}\r\n        />\r\n        <button onClick={onApprovePressed}>\r\n          Approve\r\n        </button>\r\n      </div>\r\n      <div>\r\n        Transfer tokens\r\n        <br/>\r\n        <input\r\n        type=\"text\"\r\n        placeholder=\"Receiver wallet address\"\r\n        onChange={(e) => setReceiverWallet(e.target.value)}\r\n        />\r\n        <input\r\n        type=\"number\"\r\n        placeholder=\"number of tokens to transfer\"\r\n        onChange={(e) => setTransferTokenAmt(e.target.value)}\r\n        />\r\n        <button onClick={transferTokens}>\r\n          Confirm Transaction\r\n        </button>\r\n      </div>\r\n      <div>\r\n        Find allowance\r\n        <br/>\r\n        <input\r\n        type='text'\r\n        placeholder='input wallet address'\r\n        onChange={(e) => setApprovedWalletAdress(e.target.value)}\r\n        />\r\n        <button onClick={getAllowance}>\r\n          Search\r\n        </button>\r\n      </div>\r\n      <div>\r\n        Transfer allowance\r\n        <br/>\r\n        <input\r\n        type='text'\r\n        placeholder='input owner wallet address'\r\n        onChange={(e) => setFromWallet(e.target.value)}\r\n        />\r\n        <input\r\n        type='text'\r\n        placeholder='input receiver wallet address'\r\n        onChange={(e) => setToWallet(e.target.value)}\r\n        />\r\n        <input\r\n        type='number'\r\n        placeholder='input number of tokens to transfer'\r\n        onChange={(e) => setTransferAllowanceAmt(e.target.value)}\r\n        />\r\n        <button onClick={transferAllowance}>\r\n          Transfer funds\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Panda;\r\n"]},"metadata":{},"sourceType":"module"}