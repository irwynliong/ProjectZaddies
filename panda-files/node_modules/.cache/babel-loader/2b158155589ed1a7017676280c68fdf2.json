{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\GregT\\\\OneDrive\\\\Desktop\\\\NUS Work Space\\\\Sheares Hall\\\\NUS Fintech Hackathon\\\\pandacontract\\\\starter-files\\\\src\\\\util\\\\interact.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nrequire('dotenv').config();\n\nconst alchemyKey = process.env.REACT_APP_ALCHEMY_KEY;\n\nconst {\n  createAlchemyWeb3\n} = require(\"@alch/alchemy-web3\");\n\nconst web3 = createAlchemyWeb3(alchemyKey);\n\nconst contractABI = require(\"../contract-abi.json\");\n\nconst contractAddress = \"0xa6447dde6b0a7f7a04ae67cce13b805081c9f829\";\nexport const helloWorldContract = new web3.eth.Contract(contractABI, contractAddress);\nexport const loadCurrentMessage = async () => {\n  const message = await helloWorldContract.methods.message().call();\n  return message;\n};\nexport const connectWallet = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      const obj = {\n        status: \"üëÜüèΩ Write a message in the text-field above.\",\n        address: addressArray[0]\n      };\n      return obj;\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"üò• \" + err.message\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\" \", \"\\uD83E\\uDD8A\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n            target: \"_blank\",\n            href: `https://metamask.io/download.html`,\n            children: \"You must install Metamask, a virtual Ethereum wallet, in your browser.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 13\n      }, this)\n    };\n  }\n};\nexport const getCurrentWalletConnected = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_accounts\"\n      });\n\n      if (addressArray.length > 0) {\n        return {\n          address: addressArray[0],\n          status: \"üëÜüèΩ Write a message in the text-field above.\"\n        };\n      } else {\n        return {\n          address: \"\",\n          status: \"ü¶ä Connect to Metamask using the top right button.\"\n        };\n      }\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"üò• \" + err.message\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\" \", \"\\uD83E\\uDD8A\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n            target: \"_blank\",\n            href: `https://metamask.io/download.html`,\n            children: \"You must install Metamask, a virtual Ethereum wallet, in your browser.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }, this)\n    };\n  }\n};\nexport const updateMessage = async (address, message) => {\n  if (!window.ethereum || address === null) {\n    return {\n      status: \"üí° Connect your Metamask wallet to update the message on the blockchain.\"\n    };\n  }\n\n  if (message.trim() === \"\") {\n    return {\n      status: \"‚ùå Your message cannot be an empty string.\"\n    };\n  } //set up transaction parameters\n\n\n  const transactionParameters = {\n    to: contractAddress,\n    // Required except during contract publications.\n    from: address,\n    // must match user's active address.\n    data: helloWorldContract.methods.update(message).encodeABI()\n  }; //sign the transaction\n\n  try {\n    const txHash = await window.ethereum.request({\n      method: \"eth_sendTransaction\",\n      params: [transactionParameters]\n    });\n    return {\n      status: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"\\u2705\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n          target: \"_blank\",\n          href: `https://goerli.etherscan.io/tx/${txHash}`,\n          children: \"View the status of your transaction on Etherscan!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 13\n        }, this), \"\\u2139\\uFE0F Once the transaction is verified by the network, the message will be updated automatically.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 13\n      }, this)\n    };\n  } catch (error) {\n    return {\n      status: \"üò• \" + error.message\n    };\n  }\n};\nexport const approveAmt = async (my_address, owner_address, amount) => {\n  if (!window.ethereum || my_address === null) {\n    return {\n      status: \"üí° Connect your Metamask wallet to update the message on the blockchain.\"\n    };\n  }\n\n  if (amount == 0) {\n    return {\n      status: \"‚ùå Your amount cannot be 0.\"\n    };\n  }\n\n  let _data = null;\n\n  try {\n    console.log('approving...');\n    _data = await helloWorldContract.methods.approve(owner_address, amount).send({\n      from: my_address\n    });\n    console.log(_data);\n    return {\n      status: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"\\u2705\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n          target: \"_blank\",\n          href: `https://goerli.etherscan.io/tx/${_data.transactionHash}`,\n          children: \"View the status of your transaction on Etherscan!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 21\n        }, this), \"\\u2139\\uFE0F Once the transaction is verified by the network, the message will be updated automatically.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 21\n      }, this)\n    };\n  } catch (error) {\n    return {\n      status: \"üò• \" + error.message\n    };\n  }\n};\nexport const tokenTransfer = async (my_address, receiver_address, amount) => {\n  if (!window.ethereum || my_address === null) {\n    return {\n      status: \"üí° Connect your Metamask wallet to update the message on the blockchain.\"\n    };\n  }\n\n  if (amount === 0) {\n    return {\n      status: \"‚ùå Your amount cannot be 0.\"\n    };\n  }\n\n  let _data = null;\n\n  try {\n    console.log('transferring...');\n    _data = await helloWorldContract.methods.transfer(receiver_address, amount).send({\n      from: my_address\n    });\n    console.log(_data);\n    return {\n      status: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"\\u2705\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n          target: \"_blank\",\n          href: `https://goerli.etherscan.io/tx/${_data.transactionHash}`,\n          children: \"View the status of your transaction on Etherscan!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 21\n        }, this), \"\\u2139\\uFE0F Once the transaction is verified by the network, the message will be updated automatically.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 21\n      }, this)\n    };\n  } catch (error) {\n    return {\n      status: \"üò• \" + error.message\n    };\n  }\n};\nexport const allowanceTransfer = async (my_address, from_address, to_address, amount) => {\n  if (!window.ethereum || my_address === null) {\n    return {\n      status: \"üí° Connect your Metamask wallet to update the message on the blockchain.\"\n    };\n  }\n\n  if (amount === 0) {\n    return {\n      status: \"‚ùå Your amount cannot be 0.\"\n    };\n  }\n\n  let _data = null;\n\n  try {\n    console.log('transferring...');\n    _data = await helloWorldContract.methods.transferFrom(from_address, to_address, amount).send({\n      from: my_address\n    });\n    console.log(_data);\n    return {\n      status: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"\\u2705\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n          target: \"_blank\",\n          href: `https://goerli.etherscan.io/tx/${_data.transactionHash}`,\n          children: \"View the status of your transaction on Etherscan!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 21\n        }, this), \"\\u2139\\uFE0F Once the transaction is verified by the network, the message will be updated automatically.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 21\n      }, this)\n    };\n  } catch (error) {\n    return {\n      status: \"üò• \" + error.message\n    };\n  }\n};","map":{"version":3,"sources":["C:/Users/GregT/OneDrive/Desktop/NUS Work Space/Sheares Hall/NUS Fintech Hackathon/pandacontract/starter-files/src/util/interact.js"],"names":["require","config","alchemyKey","process","env","REACT_APP_ALCHEMY_KEY","createAlchemyWeb3","web3","contractABI","contractAddress","helloWorldContract","eth","Contract","loadCurrentMessage","message","methods","call","connectWallet","window","ethereum","addressArray","request","method","obj","status","address","err","getCurrentWalletConnected","length","updateMessage","trim","transactionParameters","to","from","data","update","encodeABI","txHash","params","error","approveAmt","my_address","owner_address","amount","_data","console","log","approve","send","transactionHash","tokenTransfer","receiver_address","transfer","allowanceTransfer","from_address","to_address","transferFrom"],"mappings":"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","sourcesContent":["require('dotenv').config();\r\nconst alchemyKey = process.env.REACT_APP_ALCHEMY_KEY;\r\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\r\nconst web3 = createAlchemyWeb3(alchemyKey);\r\n\r\nconst contractABI = require(\"../contract-abi.json\");\r\nconst contractAddress = \"0xa6447dde6b0a7f7a04ae67cce13b805081c9f829\";\r\n\r\nexport const helloWorldContract = new web3.eth.Contract(\r\n    contractABI,\r\n    contractAddress\r\n  );\r\n\r\nexport const loadCurrentMessage = async () => {\r\n    const message = await helloWorldContract.methods.message().call();\r\n    return message;\r\n};\r\n\r\nexport const connectWallet = async () => {\r\n    if (window.ethereum) {\r\n        try {\r\n          const addressArray = await window.ethereum.request({\r\n            method: \"eth_requestAccounts\",\r\n          });\r\n          const obj = {\r\n            status: \"üëÜüèΩ Write a message in the text-field above.\",\r\n            address: addressArray[0],\r\n          };\r\n          return obj;\r\n        } catch (err) {\r\n          return {\r\n            address: \"\",\r\n            status: \"üò• \" + err.message,\r\n          };\r\n        }\r\n      } else {\r\n        return {\r\n          address: \"\",\r\n          status: (\r\n            <span>\r\n              <p>\r\n                {\" \"}\r\n                ü¶ä{\" \"}\r\n                <a target=\"_blank\" href={`https://metamask.io/download.html`}>\r\n                  You must install Metamask, a virtual Ethereum wallet, in your\r\n                  browser.\r\n                </a>\r\n              </p>\r\n            </span>\r\n          ),\r\n        };\r\n      }\r\n};\r\n\r\nexport const getCurrentWalletConnected = async () => {\r\n    if (window.ethereum) {\r\n        try {\r\n          const addressArray = await window.ethereum.request({\r\n            method: \"eth_accounts\",\r\n          });\r\n          if (addressArray.length > 0) {\r\n            return {\r\n              address: addressArray[0],\r\n              status: \"üëÜüèΩ Write a message in the text-field above.\",\r\n            };\r\n          } else {\r\n            return {\r\n              address: \"\",\r\n              status: \"ü¶ä Connect to Metamask using the top right button.\",\r\n            };\r\n          }\r\n        } catch (err) {\r\n          return {\r\n            address: \"\",\r\n            status: \"üò• \" + err.message,\r\n          };\r\n        }\r\n      } else {\r\n        return {\r\n          address: \"\",\r\n          status: (\r\n            <span>\r\n              <p>\r\n                {\" \"}\r\n                ü¶ä{\" \"}\r\n                <a target=\"_blank\" href={`https://metamask.io/download.html`}>\r\n                  You must install Metamask, a virtual Ethereum wallet, in your\r\n                  browser.\r\n                </a>\r\n              </p>\r\n            </span>\r\n          ),\r\n        };\r\n      }\r\n};\r\n\r\nexport const updateMessage = async (address, message) => {\r\n    if (!window.ethereum || address === null) {\r\n        return {\r\n          status:\r\n            \"üí° Connect your Metamask wallet to update the message on the blockchain.\",\r\n        };\r\n      }\r\n    \r\n    if (message.trim() === \"\") {\r\n    return {\r\n        status: \"‚ùå Your message cannot be an empty string.\",\r\n    };\r\n    }\r\n\r\n    //set up transaction parameters\r\n    const transactionParameters = {\r\n        to: contractAddress, // Required except during contract publications.\r\n        from: address, // must match user's active address.\r\n        data: helloWorldContract.methods.update(message).encodeABI(),\r\n    };\r\n\r\n    //sign the transaction\r\n    try {\r\n        const txHash = await window.ethereum.request({\r\n        method: \"eth_sendTransaction\",\r\n        params: [transactionParameters],\r\n        });\r\n        return {\r\n        status: (\r\n            <span>\r\n            ‚úÖ{\" \"}\r\n            <a target=\"_blank\" href={`https://goerli.etherscan.io/tx/${txHash}`}>\r\n                View the status of your transaction on Etherscan!\r\n            </a>\r\n            <br />\r\n            ‚ÑπÔ∏è Once the transaction is verified by the network, the message will\r\n            be updated automatically.\r\n            </span>\r\n        ),\r\n        };\r\n    } catch (error) {\r\n        return {\r\n        status: \"üò• \" + error.message,\r\n        };\r\n    }\r\n};\r\n\r\nexport const approveAmt = async (my_address, owner_address, amount) => {\r\n    if (!window.ethereum || my_address === null) {\r\n        return {\r\n          status:\r\n            \"üí° Connect your Metamask wallet to update the message on the blockchain.\",\r\n        };\r\n      }\r\n    \r\n    if (amount == 0) {\r\n    return {\r\n        status: \"‚ùå Your amount cannot be 0.\",\r\n    };\r\n    }\r\n\r\n    let _data = null\r\n    \r\n        try{\r\n            console.log('approving...')\r\n            _data = await helloWorldContract.methods.approve(owner_address, amount).send({from: my_address})\r\n            console.log(_data)\r\n            return {\r\n                status: (\r\n                    <span>\r\n                    ‚úÖ{\" \"}\r\n                    <a target=\"_blank\" href={`https://goerli.etherscan.io/tx/${_data.transactionHash}`}>\r\n                        View the status of your transaction on Etherscan!\r\n                    </a>\r\n                    <br />\r\n                    ‚ÑπÔ∏è Once the transaction is verified by the network, the message will\r\n                    be updated automatically.\r\n                    </span>\r\n                ),\r\n                };\r\n        }\r\n        catch (error) {\r\n            return {\r\n                status: \"üò• \" + error.message,\r\n            }\r\n        }\r\n};\r\n\r\nexport const tokenTransfer = async (my_address, receiver_address, amount) => {\r\n    if (!window.ethereum || my_address === null) {\r\n        return {\r\n          status:\r\n            \"üí° Connect your Metamask wallet to update the message on the blockchain.\",\r\n        };\r\n      }\r\n    \r\n    if (amount === 0) {\r\n    return {\r\n        status: \"‚ùå Your amount cannot be 0.\",\r\n    };\r\n    }\r\n\r\n    let _data = null\r\n    \r\n        try{\r\n            console.log('transferring...')\r\n            _data = await helloWorldContract.methods.transfer(receiver_address, amount).send({from: my_address})\r\n            console.log(_data)\r\n            return {\r\n                status: (\r\n                    <span>\r\n                    ‚úÖ{\" \"}\r\n                    <a target=\"_blank\" href={`https://goerli.etherscan.io/tx/${_data.transactionHash}`}>\r\n                        View the status of your transaction on Etherscan!\r\n                    </a>\r\n                    <br />\r\n                    ‚ÑπÔ∏è Once the transaction is verified by the network, the message will\r\n                    be updated automatically.\r\n                    </span>\r\n                ),\r\n                };\r\n        }\r\n        catch (error) {\r\n            return {\r\n                status: \"üò• \" + error.message,\r\n            }\r\n        }\r\n}\r\n\r\nexport const allowanceTransfer = async (my_address, from_address, to_address, amount) => {\r\n    if (!window.ethereum || my_address === null) {\r\n        return {\r\n          status:\r\n            \"üí° Connect your Metamask wallet to update the message on the blockchain.\",\r\n        };\r\n      }\r\n    \r\n    if (amount === 0) {\r\n    return {\r\n        status: \"‚ùå Your amount cannot be 0.\",\r\n    };\r\n    }\r\n\r\n    let _data = null\r\n    \r\n        try{\r\n            console.log('transferring...')\r\n            _data = await helloWorldContract.methods.transferFrom(from_address, to_address, amount).send({from: my_address})\r\n            console.log(_data)\r\n            return {\r\n                status: (\r\n                    <span>\r\n                    ‚úÖ{\" \"}\r\n                    <a target=\"_blank\" href={`https://goerli.etherscan.io/tx/${_data.transactionHash}`}>\r\n                        View the status of your transaction on Etherscan!\r\n                    </a>\r\n                    <br />\r\n                    ‚ÑπÔ∏è Once the transaction is verified by the network, the message will\r\n                    be updated automatically.\r\n                    </span>\r\n                ),\r\n                };\r\n        }\r\n        catch (error) {\r\n            return {\r\n                status: \"üò• \" + error.message,\r\n            }\r\n        }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}