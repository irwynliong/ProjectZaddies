{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\GregT\\\\OneDrive\\\\Desktop\\\\NUS Work Space\\\\Sheares Hall\\\\NUS Fintech Hackathon\\\\pandacontract\\\\starter-files\\\\src\\\\HelloWorld.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { helloWorldContract, connectWallet, updateMessage, loadCurrentMessage, getCurrentWalletConnected, approveAmt, tokenTransfer } from \"./util/interact.js\";\nimport alchemylogo from \"./alchemylogo.svg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst HelloWorld = () => {\n  _s();\n\n  //state variables\n  const contract_owner = \"0x7a6586830eB47F53FA2F66E538d51aCc1B10FeB8\"; // my second wallet for testing purposes\n\n  const [walletAddress, setWallet] = useState(\"\");\n  const [status, setStatus] = useState(\"\");\n  const [message, setMessage] = useState(\"No connection to the network.\"); //default message\n\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [myBalance, setMyBalance] = useState(0);\n  const [approveTokenAmt, setApproveTokenAmt] = useState(0);\n  const [transferTokenAmt, setTransferTokenAmt] = useState(0);\n  const [receiverWallet, setReceiverWallet] = useState(''); //called only once\n\n  useEffect(async () => {\n    const message = await loadCurrentMessage();\n    setMessage(message);\n    addSmartContractListener();\n    const {\n      address,\n      status\n    } = await getCurrentWalletConnected();\n    setWallet(address);\n    setStatus(status);\n    addWalletListener();\n    getMyBalance();\n  }, [walletAddress]);\n\n  function addSmartContractListener() {\n    helloWorldContract.events.UpdatedMessages({}, (error, data) => {\n      if (error) {\n        setStatus(\"😥 \" + error.message);\n      } else {\n        setMessage(data.returnValues[1]);\n        setNewMessage(\"\");\n        setStatus(\"🎉 Your message has been updated!\");\n      }\n    });\n  }\n\n  function addWalletListener() {\n    if (window.ethereum) {\n      window.ethereum.on(\"accountsChanged\", accounts => {\n        if (accounts.length > 0) {\n          setWallet(accounts[0]);\n          setStatus(\"👆🏽 Write a message in the text-field above.\");\n        } else {\n          setWallet(\"\");\n          setStatus(\"🦊 Connect to Metamask using the top right button.\");\n        }\n      });\n    } else {\n      setStatus( /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\" \", \"\\uD83E\\uDD8A\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n          target: \"_blank\",\n          href: `https://metamask.io/download.html`,\n          children: \"You must install Metamask, a virtual Ethereum wallet, in your browser.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this));\n    }\n  }\n\n  const connectWalletPressed = async () => {\n    const walletResponse = await connectWallet();\n    setStatus(walletResponse.status);\n    setWallet(walletResponse.address);\n  };\n\n  const onUpdatePressed = async () => {\n    const {\n      status\n    } = await updateMessage(walletAddress, newMessage);\n    setStatus(status);\n  };\n\n  const onApprovePressed = async () => {\n    console.log(\"approve button clicked\");\n    await approveAmt(walletAddress, contract_owner, approveTokenAmt);\n  };\n\n  const totalSupplyPressed = async () => {\n    const test = await helloWorldContract.methods.totalSupply().call();\n    console.log(test);\n  };\n\n  const getMyBalance = async () => {\n    if (walletAddress) {\n      const balance = await helloWorldContract.methods.balanceOf(walletAddress).call();\n      setMyBalance(balance);\n    }\n  };\n\n  const transferTokens = async () => {\n    const {\n      status\n    } = await tokenTransfer(walletAddress, receiverWallet, transferTokenAmt);\n    setStatus(status);\n  }; //the UI of our component\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      id: \"logo\",\n      src: alchemylogo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      id: \"walletButton\",\n      onClick: connectWalletPressed,\n      children: walletAddress.length > 0 ? \"Connected: \" + String(walletAddress).substring(0, 6) + \"...\" + String(walletAddress).substring(38) : /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Connect Wallet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      style: {\n        paddingTop: \"50px\"\n      },\n      children: \"Current Message:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      style: {\n        paddingTop: \"18px\"\n      },\n      children: \"New Message:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Update the message in your smart contract.\",\n        onChange: e => setNewMessage(e.target.value),\n        value: newMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        id: \"status\",\n        children: status\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"publish\",\n        onClick: onUpdatePressed,\n        children: \"Update\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: totalSupplyPressed,\n        children: \"Total Supply\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"My Panda Token Balance: \", myBalance]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Transfer tokens\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Receiver wallet address\",\n        onChange: e => setReceiverWallet(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        placeholder: \"number of tokens to transfer\",\n        onChange: e => setTransferTokenAmt(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: transferTokens,\n        children: \"Confirm Transaction\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n};\n\n_s(HelloWorld, \"+gaZuMZAF66JrkhCgb6GBCevIAk=\");\n\n_c = HelloWorld;\nexport default HelloWorld;\n\nvar _c;\n\n$RefreshReg$(_c, \"HelloWorld\");","map":{"version":3,"sources":["C:/Users/GregT/OneDrive/Desktop/NUS Work Space/Sheares Hall/NUS Fintech Hackathon/pandacontract/starter-files/src/HelloWorld.js"],"names":["React","useEffect","useState","helloWorldContract","connectWallet","updateMessage","loadCurrentMessage","getCurrentWalletConnected","approveAmt","tokenTransfer","HelloWorld","contract_owner","walletAddress","setWallet","status","setStatus","message","setMessage","newMessage","setNewMessage","myBalance","setMyBalance","approveTokenAmt","setApproveTokenAmt","transferTokenAmt","setTransferTokenAmt","receiverWallet","setReceiverWallet","addSmartContractListener","address","addWalletListener","getMyBalance","events","UpdatedMessages","error","data","returnValues","window","ethereum","on","accounts","length","connectWalletPressed","walletResponse","onUpdatePressed","onApprovePressed","console","log","totalSupplyPressed","test","methods","totalSupply","call","balance","balanceOf","transferTokens","alchemylogo","String","substring","paddingTop","e","target","value"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { useEffect, useState } from \"react\";\r\nimport {\r\n  helloWorldContract,\r\n  connectWallet,\r\n  updateMessage,\r\n  loadCurrentMessage,\r\n  getCurrentWalletConnected,\r\n  approveAmt, \r\n  tokenTransfer\r\n} from \"./util/interact.js\";\r\n\r\nimport alchemylogo from \"./alchemylogo.svg\";\r\n\r\nconst HelloWorld = () => {\r\n  //state variables\r\n  const contract_owner = \"0x7a6586830eB47F53FA2F66E538d51aCc1B10FeB8\" // my second wallet for testing purposes\r\n  const [walletAddress, setWallet] = useState(\"\");\r\n  const [status, setStatus] = useState(\"\");\r\n  const [message, setMessage] = useState(\"No connection to the network.\"); //default message\r\n  const [newMessage, setNewMessage] = useState(\"\");\r\n  const [myBalance, setMyBalance] = useState(0);\r\n  const [approveTokenAmt, setApproveTokenAmt] = useState(0);\r\n  const [transferTokenAmt, setTransferTokenAmt] = useState(0);\r\n  const [receiverWallet, setReceiverWallet] = useState('');\r\n\r\n\r\n  //called only once\r\n  useEffect(async () => {\r\n    const message = await loadCurrentMessage();\r\n    setMessage(message);\r\n    addSmartContractListener();\r\n\r\n    const {address, status} = await getCurrentWalletConnected();\r\n    setWallet(address);\r\n    setStatus(status);\r\n\r\n    addWalletListener();\r\n    getMyBalance();\r\n  }, [walletAddress]);\r\n\r\n  function addSmartContractListener() {\r\n    helloWorldContract.events.UpdatedMessages({}, (error, data) => {\r\n      if (error) {\r\n        setStatus(\"😥 \" + error.message);\r\n      } else {\r\n        setMessage(data.returnValues[1]);\r\n        setNewMessage(\"\");\r\n        setStatus(\"🎉 Your message has been updated!\");\r\n      }\r\n    });\r\n  }\r\n\r\n  function addWalletListener() { \r\n    if (window.ethereum) {\r\n      window.ethereum.on(\"accountsChanged\", (accounts) => {\r\n        if (accounts.length > 0) {\r\n          setWallet(accounts[0]);\r\n          setStatus(\"👆🏽 Write a message in the text-field above.\");\r\n        } else {\r\n          setWallet(\"\");\r\n          setStatus(\"🦊 Connect to Metamask using the top right button.\");\r\n        }\r\n      });\r\n    } else {\r\n      setStatus(\r\n        <p>\r\n          {\" \"}\r\n          🦊{\" \"}\r\n          <a target=\"_blank\" href={`https://metamask.io/download.html`}>\r\n            You must install Metamask, a virtual Ethereum wallet, in your\r\n            browser.\r\n          </a>\r\n        </p>\r\n      );\r\n    }\r\n  }\r\n\r\n  const connectWalletPressed = async () => {\r\n    const walletResponse = await connectWallet();\r\n    setStatus(walletResponse.status);\r\n    setWallet(walletResponse.address);\r\n  };\r\n\r\n  const onUpdatePressed = async () => {\r\n    const { status } = await updateMessage(walletAddress, newMessage);\r\n    setStatus(status);\r\n  };\r\n\r\n  const onApprovePressed = async () => {\r\n    console.log(\"approve button clicked\")\r\n    await approveAmt(walletAddress, contract_owner, approveTokenAmt)\r\n  };\r\n\r\n\r\n  const totalSupplyPressed = async () => {\r\n    const test = await helloWorldContract.methods.totalSupply().call()\r\n    console.log(test)\r\n  }\r\n\r\n  const getMyBalance = async () => {\r\n    if(walletAddress){\r\n      const balance = await helloWorldContract.methods.balanceOf(walletAddress).call()\r\n      setMyBalance(balance)\r\n    }\r\n  }\r\n\r\n  const transferTokens = async () => {\r\n    const { status } = await tokenTransfer(walletAddress, receiverWallet, transferTokenAmt);\r\n    setStatus(status)\r\n  }\r\n\r\n  //the UI of our component\r\n  return (\r\n    <div id=\"container\">\r\n      <img id=\"logo\" src={alchemylogo}></img>\r\n      <button id=\"walletButton\" onClick={connectWalletPressed}>\r\n        {walletAddress.length > 0 ? (\r\n          \"Connected: \" +\r\n          String(walletAddress).substring(0, 6) +\r\n          \"...\" +\r\n          String(walletAddress).substring(38)\r\n        ) : (\r\n          <span>Connect Wallet</span>\r\n        )}\r\n      </button>\r\n\r\n      <h2 style={{ paddingTop: \"50px\" }}>Current Message:</h2>\r\n      <p>{message}</p>\r\n\r\n      <h2 style={{ paddingTop: \"18px\" }}>New Message:</h2>\r\n\r\n      <div>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Update the message in your smart contract.\"\r\n          onChange={(e) => setNewMessage(e.target.value)}\r\n          value={newMessage}\r\n        />\r\n        <p id=\"status\">{status}</p>\r\n\r\n        <button id=\"publish\" onClick={onUpdatePressed}>\r\n          Update\r\n        </button>\r\n      </div>\r\n      <div>\r\n        <button onClick={totalSupplyPressed}>\r\n          Total Supply\r\n        </button>\r\n      </div>\r\n      <div>\r\n        My Panda Token Balance: {myBalance}\r\n      </div>\r\n      {/* <div>\r\n        <div>\r\n          Please input how many tokens you want Panda Bank to handle for you\r\n        </div>\r\n        <input\r\n        type='number'\r\n        placeholder=\"e.g. 2000\"\r\n        onChange={(e) => setApproveTokenAmt(e.target.value)}\r\n        />\r\n        <button onClick={onApprovePressed}>\r\n          Approve\r\n        </button>\r\n      </div> */}\r\n      <div>\r\n        Transfer tokens\r\n        <br/>\r\n        <input\r\n        type=\"text\"\r\n        placeholder=\"Receiver wallet address\"\r\n        onChange={(e) => setReceiverWallet(e.target.value)}\r\n        />\r\n        <input\r\n        type=\"number\"\r\n        placeholder=\"number of tokens to transfer\"\r\n        onChange={(e) => setTransferTokenAmt(e.target.value)}\r\n        />\r\n        <button onClick={transferTokens}>\r\n          Confirm Transaction\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HelloWorld;\r\n"]},"metadata":{},"sourceType":"module"}